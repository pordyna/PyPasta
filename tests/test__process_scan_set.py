import numpy as np

# Generated by CodiumAI

from pypasta.read_input import _process_scan_set
from pypasta.ParamDict import ParamDict
import pytest

class Test_ProcessScanSet:

    #  correctly processes a scan set with 'halton' sampling method
    def test_processes_halton_sampling_method(self):
        scan_set = {
            'sampling_method': 'halton',
            'bounds': {'param1': [0, 1], 'param2': [0, 1]},
            'n_samples': 10,
            'units': {'param1': 'meter', 'param2': 'second'},
            'seed': 42,
            'type': 'set'
        }
        result = _process_scan_set(scan_set)
        assert isinstance(result, ParamDict)
        assert 'param1' in result
        assert 'param2' in result

    #  raises ValueError for unknown sampling method
    def test_raises_value_error_for_unknown_sampling_method(self):
        scan_set = {
            'sampling_method': 'unknown_method',
            'type': 'set'
        }
        with pytest.raises(ValueError, match="Unknown sampling method unknown_method"):
            _process_scan_set(scan_set)

    #  add a test with bounds different than 0, 1
    def test_bounds_not_01(self):
        scan_set = {
            'sampling_method': 'halton',
            'bounds': {'param1': (0, 10), 'param2': (-5, 5)},
            'n_samples': 5,
            'units': {'param1': 'm', 'param2': 's'},
            'seed': 42
        }
        result = _process_scan_set(scan_set)
        assert result['param1'].magnitude.min() >= 0
        assert result['param1'].magnitude.max() < 10
        assert result['param2'].magnitude.min() >= -5
        assert result['param2'].magnitude.max() < 5

    #  add a test for static method
    def test_static_method(self):
        scan_set = {
            'sampling_method': 'static',
            'values': {'param1': [1, 2, 3], 'param2': [4, 5, 6]},
            'units': {'param1': 'm', 'param2': 's'}
        }
        result = _process_scan_set(scan_set)
        assert isinstance(result, ParamDict)
        assert 'param1' in result
        assert 'param2' in result
        assert len(result['param1']) == 3
        assert len(result['param2']) == 3
        assert np.all(np.equal(result['param1'].magnitude, [1, 2, 3]))
        assert np.all(np.equal(result['param2'].magnitude, [4, 5, 6]))
